// Generated by CoffeeScript 1.9.2
(function() {
  var SpotifyService, mock;

  mock = true;

  angular.module('HueThesis').service('$spotify', SpotifyService = (function() {
    var CLIENT_ID, TOKEN_SERVICE, audioplayer;

    TOKEN_SERVICE = "http://www.torsten-rueter.com";

    CLIENT_ID = audioplayer = null;

    function SpotifyService($rootScope, $http, $interval, $q) {
      console.log("trying to authenticate");
      spotify.authenticate('test-scheme', 'aRandomClientId1234', 'code', 'http://tok.en', ['streaming'], function(err, session) {
        if (!mock) {
          console.log("authenticated");
        }
        if (!mock) {
          console.log(arguments);
        }
        audioplayer = spotify.createAudioPlayer(CLIENT_ID);
        if (!mock) {
          console.log("creating audio player");
        }
        return audioplayer.login(session, function() {
          if (!mock) {
            console.log("audio player created");
          }
          if (!mock) {
            console.log(arguments);
          }
          if (!mock) {
            console.log("playing song");
          }
          return audioplayer.play('spotify:track:3XpXhVtZwqh2eM5d9ieXT5', function(err, data) {
            if (!mock) {
              console.log("song playing");
            }
            if (!mock) {
              console.log(arguments);
            }
            if (mock) {
              $interval(function() {
                return $rootScope.$emit('song:event', {
                  type: "beat",
                  time: performance.now(),
                  duration: 0.3
                });
              }, 1000);
              $interval(function() {
                return $rootScope.$emit('song:event', {
                  type: "bar",
                  time: performance.now(),
                  duration: 4
                });
              }, 4002);
              return $interval(function() {
                return $rootScope.$emit('song:event', {
                  type: "section",
                  time: performance.now(),
                  duration: 0.5
                });
              }, 8000);
            }
          });
        });
      });
    }

    SpotifyService.prototype.isSessionValid = function(session, callback) {
      return spotify.isSessionValid(session, callback);
    };

    SpotifyService.prototype.renewSession = function() {
      return spotify.renewSession(session, TOKEN_SERVICE, callback);
    };

    return SpotifyService;

  })());

  if (mock) {
    window.spotify = {
      authenticate: function(a, b, c, d, e, cb) {
        return cb();
      },
      createAudioPlayer: function() {
        return {
          login: function(a, cb) {
            return cb();
          },
          play: function(a, cb) {
            return cb();
          }
        };
      }
    };
  }

}).call(this);
