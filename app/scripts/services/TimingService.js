// Generated by CoffeeScript 1.9.2
(function() {
  var HueService, hueBulbs, livingColors;

  hueBulbs = ['LCT001'];

  livingColors = ['LLC006', 'LLC007'];

  angular.module('HueThesis').service('$timi', HueService = (function() {
    HueService.prototype.ip = '192.168.0.16';

    HueService.prototype.user = 'newdeveloper';

    HueService.prototype._lights = [];

    function HueService($rootScope, $http, $q) {
      var q;
      q = $q.defer();
      this.lights = function() {
        return q.promise;
      };
      this.sync = function() {
        if (q.promise.$$state.status === 1) {
          q = $q.defer();
        }
        this.api = "http://" + this.ip + "/api/" + this.user + "/";
        $http.get(this.api + "lights").then((function(_this) {
          return function(resp) {
            var k, l, lights, ref, v;
            lights = [];
            ref = resp.data;
            for (k in ref) {
              v = ref[k];
              lights.push(v);
            }
            q.resolve(lights);
            _this._lights = (function() {
              var j, len, results;
              results = [];
              for (j = 0, len = lights.length; j < len; j++) {
                l = lights[j];
                results.push(l.state);
              }
              return results;
            })();
            return q;
          };
        })(this), function(err) {
          return q.reject(err);
        });
        return this;
      };
      this.toggleAll = function() {
        var i, j, l, len, ref, results;
        ref = this._lights;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          l = ref[i];
          results.push(this.set(i, {
            on: !l.on
          }));
        }
        return results;
      };
      this.set = function(n, data) {
        var promise;
        console.log("set");
        data = this.normalize(n, data);
        console.log(JSON.stringify(data));
        promise = $http.put(("http://" + this.ip + "/api/" + this.user + "/lights/") + (n + 1) + "/state", data);
        return promise.then((function(_this) {
          return function(resp) {
            var d, j, k, len, path, prefix, ref, results, v;
            ref = resp.data;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              d = ref[j];
              results.push((function() {
                var ref1, ref2, results1;
                ref1 = d.success;
                results1 = [];
                for (k in ref1) {
                  v = ref1[k];
                  ref2 = k.split('/state/'), prefix = ref2[0], path = ref2[1];
                  if (path !== 'effect') {
                    results1.push(this._lights[n][path] = v);
                  } else {
                    results1.push(void 0);
                  }
                }
                return results1;
              }).call(_this));
            }
            return results;
          };
        })(this), function(err) {});
      };
      this.sync();
    }

    HueService.prototype.normalize = function(n, data) {
      var k, v;
      for (k in data) {
        v = data[k];
        if (k === 'hue') {
          if (v > 65535) {
            while (v > 65535) {
              v = v - 65535;
            }
            data.hue = v;
          }
        }
        if (k === 'on') {
          if (v === this._lights[n].on) {
            delete data.on;
          }
        }
      }
      if (data.transitiontime == null) {
        data.transitiontime = 0;
      }
      return data;
    };

    HueService.prototype.xyBriToRgb = function(xyb) {
      var X, Y, Z, b, cap, g, r, x, y, z;
      if (0 > xyb.x || xyb.x > .8) {
        throw 'x property must be between 0 and .8, but is: ' + xyb.x;
      }
      if (0 > xyb.y || xyb.y > 1) {
        throw 'y property must be between 0 and 1, but is: ' + xyb.y;
      }
      if (0 > xyb.bri || xyb.bri > 1) {
        throw 'bri property must be between 0 and 1, but is: ' + xyb.bri;
      }
      x = xyb.x;
      y = xyb.y;
      z = 1.0 - x - y;
      Y = xyb.bri;
      X = Y / y * x;
      Z = Y / y * z;
      r = X * 1.612 - Y * 0.203 - Z * 0.302;
      g = -X * 0.509 + Y * 1.412 + Z * 0.066;
      b = X * 0.026 - Y * 0.072 + Z * 0.962;
      r = r <= 0.0031308 ? 12.92 * r : (1.0 + 0.055) * Math.pow(r, 1.0 / 2.4) - 0.055;
      g = g <= 0.0031308 ? 12.92 * g : (1.0 + 0.055) * Math.pow(g, 1.0 / 2.4) - 0.055;
      b = b <= 0.0031308 ? 12.92 * b : (1.0 + 0.055) * Math.pow(b, 1.0 / 2.4) - 0.055;
      cap = function(x) {
        return Math.max(0, Math.min(1, x));
      };
      return {
        r: cap(r),
        g: cap(g),
        b: cap(b)
      };
    };

    HueService.prototype.rgbToXyBri = function(rgb) {
      var X, Y, Z, b, blue, cx, cy, g, green, r, red;
      if (0 > rgb.r || rgb.r > 1 || 0 > rgb.g || rgb.g > 1 || 0 > rgb.b || rgb.b > 1) {
        throw 'r, g, and, b properties must be between 0 and 1';
      }
      red = rgb.r;
      green = rgb.g;
      blue = rgb.b;
      r = red > 0.04045 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92;
      g = green > 0.04045 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92;
      b = blue > 0.04045 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92;
      X = r * 0.649926 + g * 0.103455 + b * 0.197109;
      Y = r * 0.234327 + g * 0.743075 + b * 0.022598;
      Z = r * 0.0000000 + g * 0.053077 + b * 1.035763;
      cx = X / (X + Y + Z);
      cy = Y / (X + Y + Z);
      if (isNaN(cx)) {
        cx = 0.0;
      }
      if (isNaN(cy)) {
        cy = 0.0;
      }
      return {
        x: cx,
        y: cy,
        bri: Y
      };
    };

    HueService.prototype.rgbToHexString = function(rgb) {
      ({
        f: function(x) {
          var s;
          x = Math.round(x * 255);
          s = '0' + x.toString(16);
          return s.substr(-2);
        }
      });
      return f(rgb.r) + f(rgb.g) + f(rgb.b);
    };

    HueService.prototype.hexStringToRgb = function(s) {
      return {
        r: parseInt(s.substring(0, 2), 16) / 255,
        g: parseInt(s.substring(2, 4), 16) / 255,
        b: parseInt(s.substring(4, 6), 16) / 255
      };
    };

    HueService.prototype.hexStringToXyBri = function(s) {
      return rgbToXyBri(hexStringToRgb(s));
    };

    HueService.prototype.triangleForModel = function(model) {
      if (hueBulbs.indexOf(model) > -1) {
        return {
          r: {
            x: .675,
            y: .322
          },
          g: {
            x: .4091,
            y: .518
          },
          b: {
            x: .167,
            y: .04
          }
        };
      } else if (livingColors.indexOf(model) > -1) {
        return {
          r: {
            x: .704,
            y: .296
          },
          g: {
            x: .2151,
            y: .7106
          },
          b: {
            x: .138,
            y: .08
          }
        };
      } else {
        return {
          r: {
            x: 1,
            y: 0
          },
          g: {
            x: 0,
            y: 1
          },
          b: {
            x: 0,
            y: 0
          }
        };
      }
    };

    HueService.prototype.crossProduct = function(p1, p2) {
      return p1.x * p2.y - p1.y * p2.x;
    };

    HueService.prototype.isPointInTriangle = function(p, triangle) {
      var blue, green, q, red, s, t, v1, v2;
      red = triangle.r;
      green = triangle.g;
      blue = triangle.b;
      v1 = {
        x: green.x - red.x,
        y: green.y - red.y
      };
      v2 = {
        x: blue.x - red.x,
        y: blue.y - red.y
      };
      q = {
        x: p.x - red.x,
        y: p.y - red.y
      };
      s = crossProduct(q, v2) / crossProduct(v1, v2);
      t = crossProduct(v1, q) / crossProduct(v1, v2);
      return s >= 0.0 && t >= 0.0 && s + t <= 1.0;
    };

    HueService.prototype.closestPointOnLine = function(a, b, p) {
      var ab, ab2, ap, ap_ab, t;
      ap = {
        x: p.x - a.x,
        y: p.y - a.y
      };
      ab = {
        x: b.x - a.x,
        y: b.y - a.y
      };
      ab2 = ab.x * ab.x + ab.y * ab.y;
      ap_ab = ap.x * ab.x + ap.y * ab.y;
      t = ap_ab / ab2;
      t = Math.min(1, Math.max(0, t));
      return {
        x: a.x + ab.x * t,
        y: a.y + ab.y * t
      };
    };

    HueService.prototype.distance = function(p1, p2) {
      var dist, dx, dy;
      dx = p1.x - p2.x;
      dy = p1.y - p2.y;
      dist = Math.sqrt(dx * dx + dy * dy);
      return dist;
    };

    HueService.prototype.xyForModel = function(xy, model) {
      var closestPoint, dAB, dAC, dBC, lowest, pAB, pAC, pBC, triangle;
      triangle = triangleForModel(model);
      if (isPointInTriangle(xy, triangle)) {
        return xy;
      }
      pAB = closestPointOnLine(triangle.r, triangle.g, xy);
      pAC = closestPointOnLine(triangle.b, triangle.r, xy);
      pBC = closestPointOnLine(triangle.g, triangle.b, xy);
      dAB = distance(xy, pAB);
      dAC = distance(xy, pAC);
      dBC = distance(xy, pBC);
      lowest = dAB;
      closestPoint = pAB;
      if (dAC < lowest) {
        lowest = dAC;
        closestPoint = pAC;
      }
      if (dBC < lowest) {
        lowest = dBC;
        closestPoint = pBC;
      }
      return closestPoint;
    };

    HueService.prototype.xyBriForModel = function(xyb, model) {
      var xy;
      xy = xyForModel(xyb, model);
      return {
        x: xy.x,
        y: xy.y,
        bri: xyb.bri
      };
    };

    return HueService;

  })());

}).call(this);

//# sourceMappingURL=TimingService.js.map
